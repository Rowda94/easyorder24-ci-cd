name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    # Code auschecken
    - name: Checkout repository
      uses: actions/checkout@v3

    # Python einrichten
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    # Abhängigkeiten installieren
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # Tests ausführen
    - name: Run tests
      working-directory: ./backend
      run: pytest tests

    # Docker Login
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Docker Image bauen und pushen
    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/easyorder24-backend:latest ./backend
        docker push ${{ secrets.DOCKER_USERNAME }}/easyorder24-backend:latest

    # Deployment nach Kubernetes (Staging)
    - name: Deploy to Kubernetes (Staging)
      run: |
        echo "Staging Deployment gestartet..."
        # hier würdest du kubectl apply -f ./backend/deployment.yaml einfügen

    # Deployment nach Kubernetes (Production, Canary)
    - name: Deploy to Kubernetes (Production - Canary)
      run: |
        echo "Production Canary Deployment gestartet..."
        # hier würdest du kubectl apply -f ./backend/deployment-prod.yaml einfügen

    # Monitoring / Feedback
    - name: Monitoring
      run: |
        echo "Monitoring aktiviert (Prometheus / Grafana Integration vorgesehen)"





